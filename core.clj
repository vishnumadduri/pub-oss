; extracts open source code out of source directory generated
; by sourcepkg class of Poky / Open Embedded Linux Disribution
;
; main function, stand-alone app
;
; by Otto Linnemann
; (C) 2014, GNU General Public Licence

(ns pub-oss.core
  (:use [pub-oss.spdx]
        [pub-oss.source-dir-utils]
        [pub-oss.file-handling]
        [utils.xml-utils]
        [utils.gen-utils])
  (:gen-class))


(defn- create-target-directories
  "helper function to initially create directory structure"
  [target-root-dir-name spdx-sub-dir-name]
  (if-not (.mkdir (java.io.File. target-root-dir-name))
    (println "target directory not empty error!")
    (let [spdx-dir-name (str target-root-dir-name "/" spdx-sub-dir-name)]
      (if-not (.mkdir (java.io.File. spdx-dir-name))
        (println (str "could not create directory " spdx-dir-name " error!"))
        true))))


(defn mainloop
  "walks through all package directories within 'oss-main-directory-name'
   and generates and copies spdx container files to '<target-directory-name>/spdx'
   and sources and patch files to appropriate subdirectories."
  [oe-main-directory-name  oss-main-directory-name  target-directory-name]
  (let [packages (get-all-os-packages oe-main-directory-name oss-main-directory-name)
        spdx-sub-dir-name "spdx"
        spx-full-qual-dir-name (str target-directory-name "/" spdx-sub-dir-name)]
    (when (create-target-directories target-directory-name spdx-sub-dir-name)
      (doseq [package packages]
        (let [package-name (:package-name package)
              spdx-content (apply-with-keywords create-spdx package)
              spdx-full-qual-file-name (str spx-full-qual-dir-name "/" package-name ".spdx")]
          (println "writing package data for " package-name)
          (write-xml spdx-full-qual-file-name spdx-content))))))


(comment "usage"

  (mainloop
   "oe-main-dir"
   "../../apps_proc/oe-core/build/tmp-eglibc/deploy/sources/arm-oe-linux-gnueabi"
   "../../apps_proc/oe-core/build/tmp-eglibc/deploy/published-oss-image-dir")


  (def r (get-all-os-packages "oe-main-dir" "../../apps_proc/oe-core/build/tmp-eglibc/deploy/sources/arm-oe-linux-gnueabi"))

  (println r)

  )

; command line interface (leiningen)
(defn -main [& args]
  (let [default-oe-main-dir "../../apps_proc/oe-core"
        default-sources-subdir "build/tmp-eglibc/deploy/sources/arm-oe-linux-gnueabi"
        default-pub-subdir "build/tmp-eglibc/deploy/published-oss-image-dir"
        oe-main-dir (if (> (count args) 2) (nth args 2) default-oe-main-dir)
        sources-dir (if (> (count args) 1) (nth args 1) (str oe-main-dir "/" default-sources-subdir))
        pub-dir (if (> (count args) 0) (nth args 0) (str oe-main-dir "/" default-pub-subdir))
        title-str (str
                   "pub-oss: extracts open source code out of source directory generated\n"
                   "         by sourcepkg class of Poky / Open Embedded Linux Disribution\n")
        help-str (str
                  "\tinvocation:  java -jar pub_oss-standalone.jar [pub-dir] [sources-dir] [oe-main-dir]\n"
                  "\t        or:  java -jar pub_oss-standalone.jar --help\n\n"
                  "\t(C) 2014, GNU General Public Licence by Otto Linnemann\n\n")
        start-msg-fmt (str
                       "starting application with\n"
                       "\t      open embedded main directory: %s\n"
                       "\t  directory generated by sourcepkg: %s\n"
                       "\tpublishing target url or directory: %s\n")
        start-msg (format start-msg-fmt oe-main-dir sources-dir pub-dir)]
    (println title-str)
    (if (= (.trim pub-dir) "--help")
      (do
        (println help-str)
        (System/exit -1))
      (do
        (println start-msg)
        (mainloop oe-main-dir sources-dir pub-dir)
        (System/exit -1)))))
